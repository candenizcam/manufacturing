---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by dreadnought.
--- DateTime: 05/06/2022 13:04
---


--[[
import "CoreLibs/graphics"
import "CoreLibs/object"


class("LevelSelect").extends()

function  LevelSelect:init(active_levels)
    self.background_visual = playdate.graphics.image.new("image/levels.png")
    self.selector_mask = playdate.graphics.image.new("image/level_select_mask.png")
    -- gaps: 15, 11, 11, 15
    self.drum_position = 0
    self.selected_level = 1
    --self.selected_x = 1
    --self.selected_y = 1
    self.selected_visual_x = 1
    self.selected_visual_y = 1
    self.active_levels = active_levels
    self.active_rows = math.ceil((active_levels+1)/3)
end

function LevelSelect:scroll()

end

function LevelSelect:move_drum(d)
    ---self.drum_position = (self.drum_position+d) % 80
end

function LevelSelect:selector_right()
    self.selected_level = math.min(self.selected_level + 1, self.active_levels)
    print("selector right")
    if self.selected_visual_x == 3 then
        self.selected_visual_x = 1
        self.selected_visual_y = math.min(  self.selected_visual_y+1, self.active_rows )
    else
        self.selected_visual_x = 1 + self.selected_visual_x
    end

    --self.selected_level = self.selected_level + 1
    --if self.selected_visual_x== 3 then
    --    self.selected_visual_x = 1
    --    self:selector_down()
    --else
    --    self.selected_x = math.min(self.active_levels,self.selected_level + 3)
    --end
end

function LevelSelect:selector_left()
    self.selected_level =  math.max(1,self.selected_level -1)

    if self.selected_visual_x == 1 then
        self.selected_visual_x = 3
        self.selected_visual_y = math.max(  self.selected_visual_y-1, self.active_rows )
    else
        self.selected_visual_x = self.selected_visual_x -1
    end

    --if self.selected_visual_x== 1 then
    --    self.selected_x = 1
    --    self:selector_up()
    --else
    --    self.selected_x = self.selected_x - 1
    --end

end

function LevelSelect:selector_up()
    self.selected_level = math.max(1,self.selected_level -3)
    self.selected_visual_y = math.max(  self.selected_visual_y-1, 1 )
    --if self.selected_visual_y~= 1 then
    --    self.selected_y =  self.selected_y - 1
    --end

end

function LevelSelect:selector_down()
    self.selected_level = math.min(self.selected_level + 3, self.active_levels)
    if(self.selected_visual_y ~= 3) then
        self.selected_visual_y = math.min(  self.selected_visual_y+1, self.active_rows )
    end


    --if self.selected_visual_y~= self.active_rows then
    --    self.selected_y =  self.selected_y + 1
    --end

end

function LevelSelect:draw()

    self.background_visual:draw(0,0 ,playdate.graphics.kImageUnflipped, playdate.geometry.rect.new(0,self.drum_position,400,240))

    local selector_x = self.selected_visual_x*(11+116) + 4 - 116
    local selector_y = self.selected_visual_y*(13+64) -1 - 64 + self.drum_position

    playdate.graphics.setColor(playdate.graphics.kColorXOR)
    self.selector_mask:draw(selector_x,selector_y)




    playdate.graphics.setColor(playdate.graphics.kColorWhite)

    playdate.graphics.setImageDrawMode(playdate.graphics.kDrawModeInverted)
    for i  = 1,self.active_levels do
        local x = i%3
        if x==0 then
            x = 3
        end
        local y = math.ceil(i/3)
        local s_x = x*(11+116) + 4 - 116
        local s_y = y*(13+64) -1 - 64 + self.drum_position
        local levelText = "Level: " .. tostring( i)
        local size_x, size_y = playdate.graphics.getTextSize(levelText)

        playdate.graphics.drawTextAligned( levelText, s_x + 114/2, s_y + 33-size_y/2, kTextAlignment.center)
    end




    playdate.graphics.setImageDrawMode(playdate.graphics.kDrawModeCopy)




end]]
