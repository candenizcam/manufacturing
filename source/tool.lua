---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by dreadnought.
--- DateTime: 04/06/2022 13:20
---


import "CoreLibs/graphics"
import "CoreLibs/object"
import "geometry"
import "global"


class("Tool").extends()

function Tool:init()
    self.min_x = 0
    self.max_x = game_area_width
    self.x = 1
    self.y = 0
    self.width = 20
    self.height = 10
    self.profiles = {rect = {}, left_45 = {}, right_45 = {}, left_30 = {}, right_30 = {}, circ_full = {}, circ_half={}, cric_full={}, cric_half={} }
    self.knife_names = {"rect","left_45","right_45","left_30","right_30","circ_full","cric_full"}
    self.knife_name_no = 7
    self.knife_index = 1

    for i = 0,self.width do
        self.profiles.rect[i] = self.height
        self.profiles.left_45[i] = self.height - i
        self.profiles.right_45[i] = self.height + i -self.width
        self.profiles.left_30[i] = self.height - (i)/2
        self.profiles.right_30[i] = self.height - (self.width - i)/2
        self.profiles.circ_full[i] = math.sqrt(self.width * i - i*i) - self.width/2 + self.height
        self.profiles.cric_full[i] =  self.height - math.sqrt(self.width * i - i*i)

    end

    for i=0,self.width/2-1 do
        self.profiles.cric_full[i],self.profiles.cric_full[self.width/2+i+1] = self.profiles.cric_full[self.width/2+i+1],self.profiles.cric_full[i]
    end
    self.profiles.cric_full[self.width/2] = self.height


    self.active_profile = self.profiles.rect
end




function Tool:reset_tool()
    self.x = 1
    self.y = 0
    self.active_profile = self.profiles.rect
end

function Tool:swap_tool()
    self.y = 0
    self.knife_index = self.knife_index+1
    if self.knife_index>self.knife_name_no then
        self.knife_index = 1
    end
    self.active_profile= self.profiles[self.knife_names[self.knife_index]]

end

function Tool:move_by_x(x)
    self.x = self.x + x
    self.x = math.min(math.max(self.x,self.min_x ), game_area_width)
end

function Tool:move_to_x(x)
    self.x = x

    self.x = math.min(math.max(self.x,self.min_x ), game_area_width)
end

function Tool:move_by_y(y)
    self.y = self.y + y
    self.y = math.min(math.max(self.y,1), 240 - log_centre )
end

function Tool:move_to_y(y)
    self.y = y

    self.y = math.min(math.max(self.y,1), 240 - log_centre )
end

function Tool:draw()
    playdate.graphics.setColor(playdate.graphics.kColorBlack)

    for i = 0,self.width do
        playdate.graphics.setColor(playdate.graphics.kColorBlack)
        playdate.graphics.drawLine(self.x + tool_offset_x + i, 240 - self.active_profile[i]-self.y, self.x + tool_offset_x + i,240)
        if i~= 0 and i~= self.width then
            playdate.graphics.setColor(playdate.graphics.kColorWhite)
            playdate.graphics.drawLine(self.x + tool_offset_x + i, 240 - self.active_profile[i]-self.y+1, self.x + tool_offset_x + i,240 - self.active_profile[i]-self.y+5)

        end

    end

end